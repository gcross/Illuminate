//@+leo-ver=5-thin
//@+node:gcross.20110715235201.1476: * @file writing_tests.dox
/*!

\page writing_tests Writing Tests

- \ref simple_test "A simple test"
- \ref when_tests_fail "When tests fail"
    - \ref customizing_failure_messages "Customizing failure messages"
        - \ref test_prefixes "Prefixes: EXPECT versus ASSERT"
        - \ref test_suffixes "Bare versus VAL versus LABELED"

*/

//@+others
//@+node:gcross.20110715235201.1480: ** A simple test
/*! \page writing_tests Writing Tests

\section simple_test A simple test

Here is an example of a very simple test:

\includelineno chapter1-simple-test.cpp

Line 1 includes illuminate.hpp, line 3 defines a test case named "two_plus_two_equals_four", and line 4 performs a simple check that 2+2 = 4.  The result of running this test is:

\include chapter1-simple-test.out

Note that when printing out test names, underscores are converted to spaces.

*/
//@+node:gcross.20110715235201.1482: ** Failing
/*! \page writing_tests Writing Tests

\section when_tests_fail When tests fail

Whenever a non-trivial test passes on the first try, I like to intentionally break the code it is testing to see if that makes the test fail in order to make sure that I am not getting a false positive.  Following this philosophy, let's make a change that breaks our simple test from the last section:

\includelineno chapter1-simple-test-broken.cpp

\include chapter1-simple-test-broken.out

As we can see, a message is output describing the location and nature of the failure.

*/
//@+node:gcross.20110715235201.1484: *3* Customizing failure messages
/*! \page writing_tests Writing Tests

\subsection customizing_failure_messages Customizing failure messages

*/
//@+node:gcross.20110715235201.1483: *4* Prefixes: EXPECT versus ASSERT
/*! \page writing_tests Writing Tests

\subsubsection test_prefixes Prefixes: EXPECT versus ASSERT

Up to now all of the test macros have begun with EXPECT;  however, all macros that start with EXCEPT also have a variant that starts with ASSERT.  The difference is that ASSERT macros end the test case if they fail, whereas EXPECT macros will keep going.

For example, here is a test with multiple EXPECT checks that fail:

\includelineno chapter1-test-with-multiple-expects.cpp
\include chapter1-test-with-multiple-expects.out

If instead we used \c ASSERT_EQ_VAL, then we would have the following:

\includelineno chapter1-test-with-multiple-asserts.cpp
\include chapter1-test-with-multiple-asserts.out

If there is a combination of EXPECTs and ASSERTs that fail, then all of the messages will be displayed up to the first ASSERT that fails:

\includelineno chapter1-test-with-multiple-expects-and-asserts.cpp
\include chapter1-test-with-multiple-expects-and-asserts.out

*/
//@+node:gcross.20110715235201.1485: *4* Suffixes: Bare versus VAL versus LABELED
/*! \page writing_tests Writing Tests

\subsubsection test_suffixes Suffixes: Bare versus VAL versus LABELED

Up to now all of the test macros have ended with VAL, but for any macro that ends in VAL there is also a bare variant and a variant that ends in LABELED.  Here is an example of using these variants:

\includelineno chapter1-suffix-variants.cpp
\include chapter1-suffix-variants.out

The bare form prints out both the expression and the value for each of the two arguments.  The LABELED form takes an extra argument before each expression that provides an explicit label for that expression.  The VAL form prints the expression and value for the first argument, but only the value of the second argument (with the label "the expected value").

*/
//@-others
//@-leo
