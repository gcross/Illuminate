// Table of Contents {{{
/*!

\page writing_tests Writing tests

- \ref simple_test
- \ref variant_macro_forms
    - \ref test_prefixes
    - \ref test_suffixes
- \ref performing_checks
    - \ref relation_checks
    - \ref approximate_equality_checks
    - \ref boolean_checks
    - \ref forced_failure
*/
// }}}

// A simple test {{{
/*! \page writing_tests Writing tests

\section simple_test A simple test

Here is an example of a very simple test:

\includelineno chapter1-simple-test.cpp

Line 1 includes illuminate.hpp, line 3 defines a test case named "two_plus_two_equals_four", and line 4 performs a simple check that 2+2 = 4.  The result of running this test is:

\include chapter1-simple-test.out

Next to each test is its id number.  Note that when printing out test names, underscores are converted to spaces.

Whenever a non-trivial test passes on the first try, I like to intentionally break the code it is testing to see if that makes the test fail in order to make sure that I am not getting a false positive.  Following this philosophy, let's make a change that breaks our simple test from the last section:

\include_example{chapter1-simple-test-broken}

As we can see, a message is output describing the location and nature of the failure.

*/
// }}}
// Variant macro forms {{{
/*! \page writing_tests Writing tests

\subsection variant_macro_forms Variant macro forms

*/

// Prefixes: EXPECT versus ASSERT {{{
/*! \page writing_tests Writing Tests

\subsubsection test_prefixes Prefixes: EXPECT versus ASSERT

Up to now all of the test macros have begun with EXPECT;  however, all macros that start with EXCEPT also have a variant that starts with ASSERT.  The difference is that ASSERT macros end the test case if they fail, whereas EXPECT macros will keep going.

For example, here is a test with multiple EXPECT checks that fail:

\include_example{chapter1-test-with-multiple-expects}

If instead we used \c ASSERT_EQ_VAL, then we would have the following:

\include_example{chapter1-test-with-multiple-asserts}

If there is a combination of EXPECTs and ASSERTs that fail, then all of the messages will be displayed up to the first ASSERT that fails:

\include_example{chapter1-test-with-multiple-expects-and-asserts}

*/
// }}}
// Bare versus VAL versus LABELED {{{
/*! \page writing_tests Writing Tests

\subsubsection test_suffixes Suffixes: Bare versus VAL versus LABELED versus UNLABELED

Up to now all of the test macros have ended with VAL, but for any macro that ends in VAL there is also a bare variant, a variant that ends in LABELED, and a variant that ends in UNLABELED.  Here is an example of using these variants:

\include_example{chapter1-suffix-variants}

The bare form prints out both the expression and the value for each of the two arguments.  The VAL form prints the expression and value for the first argument, but only the value of the second argument (with the label "the expected value").  The LABELED form takes an extra argument before each expression that provides an explicit label for that expression.  The UNLABELED form does not display any labels for the two values.

*/
// }}}

// }}}
// Performing checks {{{
/*! \page writing_tests Writing tests

\subsection performing_checks Performing checks

*/

// Relation checks {{{
/*! \page writing_tests Writing tests

\subsubsection relation_checks Relation checks

Up to this point we have only been using macros that check for equality, but Illuminate has other checks as well:

    - EQ: a == b
    - NE: a != b
    - GE: a >= b
    - GT: a > b
    - LE: a <= b
    - LT: a < b

Here is an example of using these checks:

\include_example{chapter1-all-relations}

*/
// }}}
// Approximate equality checks {{{
/*! \page writing_tests Writing tests

\subsubsection approximate_equality_checks Approximate equality checks

When working with floating point numbers, one often ends up with results that need to be checked for approximate equality to an exact result rather than exact equality.  The NEAR_ABS and NEAR_REL checks are provided for this purpose.  NEAR_ABS checks that two values are equal within an \a absolute tolerance --- that is, EXPECT_NEAR_ABS(a,b,c) checks that \f$|a-b| \le c\f$.  NEAR_REL checks that two values are equal within a \a relative tolerance --- that is, EXPECT_NEAR_REL(a,b,c) checks roughly that either \f$|a|+|b| \le c\f$ (that is, both a and b are approximately 0) or that \f$\frac{|a-b|}{(|a|+|b|)/2} \le c\f$.

Here is an example of using these checks:

\include_example{chapter1-approximate-equality}

*/
// }}}
// Boolean checks {{{
/*! \page writing_tests Writing tests

\subsubsection boolean_checks Boolean checks

Sometimes you just have an expression and you need to check that it is true or false.  EXPECT_TRUE(x) / ASSERT_TRUE(x) and EXPECT_FALSE(x) / ASSERT_FALSE(x) provide this functionality, respectively checking that a given expression (x) is true or false.

Here is an example of using these checks:

\include_example{chapter1-boolean-checks}

*/
// }}}
// Forced faiure {{{
/*! \page writing_tests Writing tests

\subsubsection forced_failure Forced failure

The macros presented previously are provided for convenience, but there is nothing stopping you from writing your own check and having exact control over the failure message that is displayed.  If your test fails, you will want to call either FAIL(msg) or FATALLY_FAIL(msg) with your failure message, where the only difference between the two macros is that the latter terminates the test in addition to displaying the failure message.

Here is an example of using these macros:

\include_example{chapter1-forced-failure}

*/
// }}}

// }}}
